package GUI;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;
import javafx.scene.text.TextFlow;
import javafx.stage.Stage;

/**
 * Class holds the text for the user manual.
 */
public class Manual {

    @FXML
    ScrollPane manualdata;
    @FXML
    VBox manual;

    public void initialize() {
        //Create text objects  
        Text text1 = new Text("User Manual\n");
        text1.setFont(new Font(30));
        text1.setFill(Color.DARKSLATEBLUE);

        Text text11 = new Text(" \n");
        text11.setFont(new Font(20));

        Text text2 = new Text("1 System overview\n \n");
        text2.setStyle("-fx-font-weight: bold");
        text2.setFont(new Font(20));

        Text text3 = new Text("\t This is an application which allows to process ATLAS log files in order to get the locations\n"
                + " of the observed tags using multilateration technique.\n"
                + "\tThis application provides a user-friendly interface which allows the user to upload log files from\n"
                + "basestations in the field and process those files in order to generate a visualisation presenting\n"
                + "extracted locations in an interactive, visual way.\n"
                + "\tComputed locations can be exported in a number of formats for use in other spatial analysis software.\n"
                + " It functions on any operating system (and requires Java Runtime Environment).\n\n");

        //Set font to the text 
        text3.setFont(new Font(12));
        Text text4 = new Text("2 Analysis mode\n \n");
        text4.setStyle("-fx-font-weight: bold");
        text4.setFont(new Font(20));

        Text text5 = new Text("\tAnalysis mode encompasses the main functionality of this program -- processing real log files\n"
                + " generated by the ATLAS basestations during the data collection in the field. In order to run the\n"
                + " application in the analysis mode, user should:\n"
                + "\t 1. Register basestations by clicking `Register and update basestations' from\n "
                + "\t\tthe main menu of the application, and provide location and\n "
                + "\t\tmeasured power parameter of all basestations that were used\n "
                + "\t\tduring the data collection. \n"
                + "\t 2. Upload and process log files by clicking on `Upload data' button from the\n "
                + "\t\tmain menu, where user should select all registered\n "
                + "\t\tbasestations used during the data collection and upload\n "
                + "\t\tcorresponding log files from their computer to the application.\n"
                + "\t 3. Select checkbox at the bottom of the data upload window to apply Kalman\n "
                + "\t\tfilter to improve the accuracy of the results.\n"
                + "\t 4. Click `Run' and observe the generated visualisation. Please refer to\n "
                + "\t\tsection Visualisation for guidance on visualisation window.\n \n");
        
        text5.setFont(new Font(12));

        Text text6 = new Text("2.1 Log files\n \n");
        text6.setStyle("-fx-font-weight: bold");
        text6.setFont(new Font(15));

        Text text7 = new Text("\tA log file records everything that goes on in a particular basestation -- radio. Each radio,\n"
                + " registered as ATLAS basestation, will automatically generate a log file when ATLAS system for\n"
                + "tracking the tags in the field is run.\n "
                + "\tThese log files change depending on the kind of radio that is used, as well as the version of\n"
                + "the software,but generally log file must include the following information for every detection\n"
                + "in order to be a valid datasource:\n"
                + "\t • Time of the detection\n"
                + "\t • Tag ID (usually a number, but might depend on a system)\n"
                + "\t • RSSI value\n"
                + "\t • SNR value, if RTL-SDR radio is used\n"
                + "Log files will usually include more data than outlined above, however it gets filtered out during the\n"
                + "processing, therefore this does not influence the functionality of the software.\n\n");

        text7.setFont(new Font(12));

        Text text8 = new Text("2.2 Kalman filter\n \n");
        text8.setStyle("-fx-font-weight: bold");
        text8.setFont(new Font(15));

        Text text9 = new Text("\t The Kalman filter is a data fusion algorithm that is used by our system to reduce noise\n"
                + "in RSSI measurements. The algorithm is a two-stage process, comprising the prediction and\n"
                + "measurement update stages.\n"
                + "\t The prediction stage involves producing current estimates of the state variables, as well as their\n"
                + "uncertainties.\n"
                + "\t During the measurement update stage, the estimates are updated based on a weighted average,\n"
                + "with estimates with higher certainty being given more weight. These stages are alternated for a fixed\n"
                + "number of iterations (time-steps), allowing noisy measurements to become increasingly accurate over\n"
                + " time. The user can choose to apply Kalman filter during the data upload.\n\n");

        text9.setFont(new Font(12));

        Text text10 = new Text("2.3 Granularity\n \n");
        text10.setStyle("-fx-font-weight: bold");
        text10.setFont(new Font(15));

        Text text12 = new Text("\tIn order to provide a smoother set of location estimations, the user has the option\n"
                + "to apply granularity to the data. In our system, the application of granularity involves\n"
                + "modifying the extracted RSSI measurements so that there is less variation between successive\n"
                + "measurements, allowing the resultant `path' (consisting of consecutive location estimations)\n"
                + "of an individual to become smoothed. This option is available in the analysis mode and is allows\n"
                + "to granulise data up to one location per minute.\n \n");

        text12.setFont(new Font(12));

        Text text13 = new Text("3 Simulation mode\n\n");
        text13.setStyle("-fx-font-weight: bold");
        text13.setFont(new Font(20));

        Text text14 = new Text("\tSimulation mode has been created to show how the program behaves with simulated\n"
                + "data, when real data is not accessible. In order to run the application in this mode, click on\n"
                + "`Run simulation' visualisation window will appear. Please refer to section Visualisation for\n"
                + "guidance on visualisation window.\n\n");

        Text text15 = new Text("4 Navigating the main menu\n\n");
        text15.setStyle("-fx-font-weight: bold");
        text15.setFont(new Font(20));

        Text text16 = new Text("From the main menu, there are 5 options to navigate the application:\n"
                + "\t 1. Register and update basestations -- provides functionality of registering basestations\n"
                + "in the internal memory of the application. This means that registered basestations will be\n"
                + "stored in the application even after the application is closed and opened again. The user\n"
                + "is required to input the following information for each of the basestations:\n"
                + "\t\t • name -- a unique name for the basestation. This name will be used as a reference\n"
                + "when uploading log files. We recommend that basestation names have some meaning, most\n"
                + "likely related to the location of the basestation or the radio model used. \n"
                + "\t\t • latitude/longitude coordinates -- geographical location coordinates in the standard\n"
                + "notation of decimal degrees. For example, geographical coordinate of Buckingham Palace is\n"
                + "51.501364° N, -0.14189° E, where N coordinate stands for latitude and E coordinate stands\n"
                + "for longitude.\n"
                + "\t\t • measured power -- factory-calibrated constant which indicates what is expected RSSI\n"
                + "value at a 1 meter distance. This can be found either from the radio description or\n"
                + "tmeasured empirically. The expected value should be in the range between -80 and -30.\n"
                + "\t In this application window, user can register basestations for later use, update\n"
                + "previously registered basestations, or delete basestations that are not relevant anymore.\n"
                + "User is not limited to the number of basestations to keep saved in the application,\n"
                + "however multilateration and visualisation rendering requires minimum 4 basestations \n"
                + "to be registered.\n "
                + "\t 2. Upload data -- provides functionality of uploading log files collected in the field\n"
                + "during the data collection. For specification of what log file should be like, please\n"
                + "refer to section Log files. User is required to select basestations from the ones that\n"
                + "are registered in the application and upload associated log files from the computer. The\n"
                + "program requires minimum 4 log files in order to do multilateration and visualisation\n"
                + "rendering. User can also choose to apply Kalman filter, which will preprocess log files\n"
                + "before applying multilateration in order to reduce the amount of noise in the data.\n"
                + "By default, Kalman filter is not selected. Clicking Run at the bottom of this window\n"
                + "causes the application to process uploaded log files, apply multilateration as well as any\n"
                + "relevant filtering, and go into the analysis mode where processed data is visualised.\n"
                + "\t 3. Run simulation -- this option can be used to observe the behaviour of the program.\n"
                + "This makes the program go into the simulation mode, where simulated log files are used.\n"
                + "We have pre-generated a number of log files that contain RSSI values to make tags simulate\n"
                + "some movement pattern. Additional noise has been added to those RSSI values to make\n "
                + "simulation more realistic. Behaviour of this part of the application is very similar to the\n"
                + "analysis mode visualisation. Please refer to section Visualisation for guidance on\n"
                + "visualisation window.\n"
                + "\t 4. User manual -- provides the user with the main information about the system and how\n"
                + "to use it.\n"
                + "\t 5. Exit -- forces application to close.\n\n");

        Text text17 = new Text("5 Visualisation\n \n");
        text17.setStyle("-fx-font-weight: bold");
        text17.setFont(new Font(20));

        Text text18 = new Text("\tVisualisation window appears when either simulated log data is processed\n"
                + "in simulation mode, or when real log data is uploaded for registered basestations. The\n"
                + "only difference between two visualisations is that simulation mode visualisation does\n"
                + "not give granularity option as it is not useful with simulated data.\n\n");

        Text text19 = new Text("5 Data export\n\n");
        text19.setStyle("-fx-font-weight: bold");
        text19.setFont(new Font(20));

        Text text20 = new Text("The software also provides functionality to export `raw' data generated\n"
                + "by processing log files to estimate tag locations. This data includes tag ID, time of\n"
                + "detection, latitude and longitude coordinate values for all detections during the\n"
                + "observation period. Users can choose to export the data in both simulation and analysis\n"
                + "modes. For that the user should click `Export data' button in the visualisation window\n"
                + "and select the name and directory on the computer where exported file should be saved.\n"
                + "The user can also select the format of the exported data, which can be in either .csv,\n"
                + ".log or .txt format.\n\n");

        //Creating the text flow plane 
        TextFlow textFlowPane = new TextFlow();

        //Setting the line spacing between the text objects 
        textFlowPane.setTextAlignment(TextAlignment.JUSTIFY);

        //Setting the width  
        textFlowPane.setPrefSize(600, 300);

        //Setting the line spacing  
        textFlowPane.setLineSpacing(5.0);

        //Retrieving the observable list of the TextFlow Pane 
        ObservableList list = textFlowPane.getChildren();

        //Adding cylinder to the pane  
        list.addAll(text1, text11, text2, text3, text4, text5, text6, text7,
                text8, text9, text10, text12, text13, text14, text15, text16,
                text17, text18, text19, text20);
        Button back = new Button("Back");
        back.setMinSize(100, 40);
        back.setStyle("-fx-font-size: 14.0;");
        back.setOnAction(event -> {
            try {
                handleCancel(event);
            } catch (IOException ex) {
                Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        manual.getChildren().addAll(list);
        manual.getChildren().add(back);

    }

    public void handleCancel(ActionEvent event) throws IOException {
        FXMLLoader sceneLoader = new FXMLLoader(getClass().getResource("menu.fxml"));
        Parent sceneParent = sceneLoader.load();
        Scene scene = new Scene(sceneParent, 400, 400);

        Stage stage = (Stage) manualdata.getScene().getWindow();
        stage.setScene(scene);
    }
}
